{"version":3,"file":"static/js/242.4a6c6264.chunk.js","mappings":"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","sources":["shared/components/Modal.js","shared/pages/Registration.js","shared/hooks/http-hook.js"],"sourcesContent":["import React from 'react';\n\nconst Modal = (props) => {\n    return (\n        <div className=\"center\">\n            {props.children}\n        </div>\n    )\n}\n\nexport default Modal;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Button, Col, Container, Form, Row } from \"react-bootstrap\";\nimport Modal from \"../components/Modal\";\nimport { useHttpClient } from \"../hooks/http-hook\";\nimport { loadCaptchaEnginge, LoadCanvasTemplate, LoadCanvasTemplateNoReload, validateCaptcha } from 'react-simple-captcha';\n\nconst Registration = () => {\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n    const [errorMessage, setErrorMessage] = useState();\n    const [successMessage, setSuccessMessage] = useState();\n\n    const navigate = useNavigate();\n\n    const refName = useRef('');\n    const refEmail = useRef();\n    const refPhone = useRef();\n    const refPassword = useRef();\n    const refConfirmPassword = useRef();\n    const refCaptcha = useRef();\n\n    useEffect(() => {\n        setTimeout(() => {\n            setSuccessMessage();\n            setErrorMessage();\n            clearError();\n        }, 10000);\n    });\n\n    useEffect(() => {\n        loadCaptchaEnginge(6);\n    }, []);\n\n    const clearForm = () => {\n        refName.current.value = '';\n        refEmail.current.value = '';\n        refPhone.current.value = '';\n        refPassword.current.value = '';\n        refConfirmPassword.current.value = '';\n        refCaptcha.current.value = '';\n    }\n\n    const success = () => {\n        setSuccessMessage('User registered successfully!');\n        clearForm();\n    }\n\n    const handleRegistration = async event => {\n        event.preventDefault();\n\n        let name = refName.current.value;\n        let email = refEmail.current.value;\n        let phone = refPhone.current.value;\n        let password = refPassword.current.value;\n        let confirmPassword = refConfirmPassword.current.value;\n        let captcha = refCaptcha.current.value;\n\n        if (password !== confirmPassword) {\n            setErrorMessage('Password and Confirm Password should be match!');\n            return false;\n        }\n\n        if (validateCaptcha(captcha) == false) {\n            setErrorMessage('Captcha does not match!');\n            return false;\n        }\n\n        try {\n            const dataResponse = await sendRequest(\n                `${process.env.REACT_APP_BACKEND_URL}/api/user/registration`,\n                'POST',\n                JSON.stringify(\n                    {\n                        name: name,\n                        email: email,\n                        phone: phone,\n                        password: password\n                    }\n                ),\n                {\n                    'Content-Type': 'application/json'\n                }\n            );\n            // auth.login(dataResponse.userId, dataResponse.token);\n            // navigate(\"/login\");\n            success();\n        } catch (err) { }\n    }\n\n    return (\n        <Modal>\n            <Container fluid=\"sm\">\n                <Row className=\"justify-content-md-center\">\n                    <Col xs lg=\"6\">\n                        <h2>Registration Form:</h2>\n                        {errorMessage && <div className=\"alert alert-danger\" role=\"alert\">\n                            {errorMessage}\n                        </div>}\n\n                        {error && <div className=\"alert alert-danger\" role=\"alert\">\n                            {error}\n                        </div>}\n\n                        {successMessage && <div className=\"alert alert-success\" role=\"alert\">\n                            {successMessage}\n                        </div>}\n\n                        <Form onSubmit={handleRegistration}>\n                            <Form.Group className=\"mb-3\">\n\n                                <Form.Label htmlFor=\"name\">Name</Form.Label>\n                                <Form.Control ref={refName} id=\"name\" type=\"text\" placeholder=\"Name\" required />\n\n                                <Form.Label htmlFor=\"email\">Email</Form.Label>\n                                <Form.Control ref={refEmail} type=\"email\" placeholder=\"Email\" required />\n\n                                <Form.Label htmlFor=\"phone\">Phone Number</Form.Label>\n                                <Form.Control ref={refPhone} type=\"text\" placeholder=\"Phone Number\" required />\n\n                                <Form.Label htmlFor=\"password\">Password</Form.Label>\n                                <Form.Control minLength=\"5\" ref={refPassword} type=\"password\" placeholder=\"Password\" required />\n\n                                <Form.Label htmlFor=\"cpassword\">Confirm Password</Form.Label>\n                                <Form.Control ref={refConfirmPassword} id=\"cpassword\" type=\"password\" placeholder=\"Confirm Password\" required />\n\n                                <br />\n                                <div>\n                                    <LoadCanvasTemplate />\n                                    <Form.Control ref={refCaptcha} id=\"captcha\" placeholder=\"Captcha\" required />\n                                </div>\n                                <Button type=\"submit\" className=\"btn-margin-top\" variant=\"primary\">\n                                    Register\n                                </Button>\n                            </Form.Group>\n                        </Form>\n                    </Col>\n                </Row>\n            </Container>\n        </Modal >\n    )\n}\n\nexport default Registration;","import React, { useCallback, useEffect, useRef, useState } from 'react';\n\nexport const useHttpClient = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState();\n\n    const activeHttpRequests = useRef([]);\n\n    const sendRequest = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n        setIsLoading(true);\n\n        const httpAbortCtrl = new AbortController();\n        activeHttpRequests.current.push(httpAbortCtrl);\n\n        try {\n            const response = await fetch(\n                url,\n                {\n                    method,\n                    body,\n                    headers,\n                    signal: httpAbortCtrl.signal\n                }\n            );\n\n            const responseData = await response.json();\n\n            activeHttpRequests.current = activeHttpRequests.current.filter(\n                reqCtrl => reqCtrl !== httpAbortCtrl\n            );\n\n            if (!response.ok) {\n                throw new Error(responseData.message);\n            }\n\n            setIsLoading(false);\n            return responseData;\n        } catch (err) {\n            setError(err.message);\n            setIsLoading(false);\n            throw err;\n        }\n    }, []);\n\n    const clearError = () => {\n        setError(null);\n    };\n\n    useEffect(() => {\n        return () => {\n            activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort());\n        };\n    }, []);\n\n    return { isLoading, error, sendRequest, clearError };\n};\n"],"names":["props","_jsx","className","children","_useHttpClient","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","error","setError","activeHttpRequests","useRef","sendRequest","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","url","method","body","headers","httpAbortCtrl","response","responseData","_args","arguments","_context","prev","next","length","undefined","AbortController","current","push","fetch","signal","sent","json","filter","reqCtrl","ok","Error","message","abrupt","t0","stop","_x","apply","useEffect","forEach","abortCtrl","abort","clearError","useHttpClient","errorMessage","setErrorMessage","successMessage","setSuccessMessage","refName","useNavigate","refEmail","refPhone","refPassword","refConfirmPassword","refCaptcha","setTimeout","loadCaptchaEnginge","success","value","handleRegistration","event","name","email","phone","password","confirmPassword","captcha","preventDefault","validateCaptcha","concat","process","REACT_APP_BACKEND_URL","JSON","stringify","Modal","Container","fluid","Row","_jsxs","Col","xs","lg","role","Form","onSubmit","htmlFor","ref","id","type","placeholder","required","minLength","LoadCanvasTemplate","Button","variant"],"sourceRoot":""}