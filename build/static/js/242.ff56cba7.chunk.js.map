{"version":3,"file":"static/js/242.ff56cba7.chunk.js","mappings":"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","sources":["shared/components/Modal.js","shared/pages/Registration.js","shared/hooks/http-hook.js"],"sourcesContent":["import React from 'react';\n\nconst Modal = (props) => {\n    return (\n        <div className=\"center\">\n            {props.children}\n        </div>\n    )\n}\n\nexport default Modal;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Button, Col, Container, Form, Row } from \"react-bootstrap\";\nimport Modal from \"../components/Modal\";\nimport { useHttpClient } from \"../hooks/http-hook\";\nimport { loadCaptchaEnginge, LoadCanvasTemplate, LoadCanvasTemplateNoReload, validateCaptcha } from 'react-simple-captcha';\n\nconst Registration = () => {\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n    const [errorMessage, setErrorMessage] = useState();\n    const [successMessage, setSuccessMessage] = useState();\n\n    const navigate = useNavigate();\n\n    const refName = useRef('');\n    const refEmail = useRef();\n    const refPhone = useRef();\n    const refPassword = useRef();\n    const refConfirmPassword = useRef();\n    const refCaptcha = useRef();\n\n    useEffect(() => {\n        setTimeout(() => {\n            setSuccessMessage();\n            setErrorMessage();\n            clearError();\n        }, 10000);\n    });\n\n    useEffect(() => {\n        loadCaptchaEnginge(6);\n    }, []);\n\n    const clearForm = () => {\n        refName.current.value = '';\n        refEmail.current.value = '';\n        refPhone.current.value = '';\n        refPassword.current.value = '';\n        refConfirmPassword.current.value = '';\n        refCaptcha.current.value = '';\n    }\n\n    const success = () => {\n        setSuccessMessage('User registered successfully!');\n        clearForm();\n    }\n\n    const handleRegistration = async event => {\n        event.preventDefault();\n\n        let name = refName.current.value;\n        let email = refEmail.current.value;\n        let phone = refPhone.current.value;\n        let password = refPassword.current.value;\n        let confirmPassword = refConfirmPassword.current.value;\n        let captcha = refCaptcha.current.value;\n\n        if (password !== confirmPassword) {\n            setErrorMessage('Password and Confirm Password should be match!');\n            return false;\n        }\n\n        if (validateCaptcha(captcha) == false) {\n            setErrorMessage('Captcha does not match!');\n            return false;\n        }\n\n        try {\n            const dataResponse = await sendRequest(\n                `${process.env.REACT_APP_BACKEND_URL}/api/user/registration`,\n                'POST',\n                JSON.stringify(\n                    {\n                        name: name,\n                        email: email,\n                        phone: phone,\n                        password: password\n                    }\n                ),\n                {\n                    'Content-Type': 'application/json'\n                }\n            );\n            // auth.login(dataResponse.userId, dataResponse.token);\n            // navigate(\"/login\");\n            success();\n        } catch (err) { }\n    }\n\n    return (\n        <Modal>\n            <Container fluid=\"sm\">\n                <Row className=\"justify-content-md-center\">\n                    <Col xs lg=\"6\">\n                        <h2>Registration Form:</h2>\n                        {errorMessage && <div className=\"alert alert-danger\" role=\"alert\">\n                            {errorMessage}\n                        </div>}\n\n                        {error && <div className=\"alert alert-danger\" role=\"alert\">\n                            {error}\n                        </div>}\n\n                        {successMessage && <div className=\"alert alert-success\" role=\"alert\">\n                            {successMessage}\n                        </div>}\n\n                        <Form onSubmit={handleRegistration}>\n                            <Form.Group className=\"mb-3\">\n\n                                <Form.Label htmlFor=\"name\">Name</Form.Label>\n                                <Form.Control ref={refName} id=\"name\" type=\"text\" placeholder=\"Name\" required />\n\n                                <Form.Label htmlFor=\"email\">Email</Form.Label>\n                                <Form.Control ref={refEmail} type=\"email\" placeholder=\"Email\" required />\n\n                                <Form.Label htmlFor=\"phone\">Phone Number</Form.Label>\n                                <Form.Control ref={refPhone} type=\"text\" placeholder=\"Phone Number\" required />\n\n                                <Form.Label htmlFor=\"password\">Password</Form.Label>\n                                <Form.Control minLength=\"5\" ref={refPassword} type=\"password\" placeholder=\"Password\" required />\n\n                                <Form.Label htmlFor=\"cpassword\">Confirm Password</Form.Label>\n                                <Form.Control ref={refConfirmPassword} id=\"cpassword\" type=\"password\" placeholder=\"Confirm Password\" required />\n\n                                <br />\n                                <div>\n                                    <LoadCanvasTemplate />\n                                    <Form.Control ref={refCaptcha} id=\"captcha\" placeholder=\"Captcha\" required />\n                                </div>\n                                <Button type=\"submit\" className=\"btn-margin-top\" variant=\"primary\">\n                                    Register\n                                </Button>\n                            </Form.Group>\n                        </Form>\n                    </Col>\n                </Row>\n            </Container>\n        </Modal >\n    )\n}\n\nexport default Registration;","import React, { useCallback, useEffect, useRef, useState } from 'react';\n\nexport const useHttpClient = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState();\n\n    const activeHttpRequests = useRef([]);\n\n    const sendRequest = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n        setIsLoading(true);\n\n        const httpAbortCtrl = new AbortController();\n        activeHttpRequests.current.push(httpAbortCtrl);\n\n        try {\n            const response = await fetch(\n                url,\n                {\n                    method,\n                    body,\n                    headers,\n                    signal: httpAbortCtrl.signal\n                }\n            );\n\n            const responseData = await response.json();\n\n            activeHttpRequests.current = activeHttpRequests.current.filter(\n                reqCtrl => reqCtrl !== httpAbortCtrl\n            );\n\n            if (!response.ok) {\n                throw new Error(responseData.message);\n            }\n\n            setIsLoading(false);\n            return responseData;\n        } catch (err) {\n            setError(err.message);\n            setIsLoading(false);\n            throw err;\n        }\n    }, []);\n\n    const clearError = () => {\n        setError(null);\n    };\n\n    useEffect(() => {\n        return () => {\n            activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort());\n        };\n    }, []);\n\n    return { isLoading, error, sendRequest, clearError };\n};\n"],"names":["props","className","children","useState","isLoading","setIsLoading","error","setError","activeHttpRequests","useRef","sendRequest","useCallback","url","method","body","headers","httpAbortCtrl","AbortController","current","push","fetch","signal","response","json","responseData","filter","reqCtrl","ok","Error","message","useEffect","forEach","abortCtrl","abort","clearError","useHttpClient","errorMessage","setErrorMessage","successMessage","setSuccessMessage","refName","useNavigate","refEmail","refPhone","refPassword","refConfirmPassword","refCaptcha","setTimeout","loadCaptchaEnginge","success","value","handleRegistration","event","preventDefault","name","email","phone","password","confirmPassword","captcha","validateCaptcha","process","REACT_APP_BACKEND_URL","JSON","stringify","Modal","Container","fluid","Row","Col","xs","lg","role","Form","onSubmit","htmlFor","ref","id","type","placeholder","required","minLength","Button","variant"],"sourceRoot":""}