{"version":3,"file":"static/js/380.9a302edf.chunk.js","mappings":"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","sources":["shared/components/Modal.js","features/components/store/Counter.js","features/components/context/Counter.js","features/pages/Recursion.js","features/pages/Timer.js","features/pages/Toggle.js","features/pages/Timeout.js","features/pages/FormData.js","features/components/recoil/counterState.js","features/components/recoil/incrementByState.js","features/components/recoil/CounterButton.js","features/components/mobx/CounterMobx.js","features/components/mobx/Counter.js","shared/pages/Features.js"],"sourcesContent":["import React from 'react';\n\nconst Modal = (props) => {\n    return (\n        <div className=\"center\">\n            {props.children}\n        </div>\n    )\n}\n\nexport default Modal;\n","import React, { useRef } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { decrement, increment, incrementByAmount } from \"./counterSlice\";\n\nconst Counter = () => {\n\n    const count = useSelector((state) => state.counter.value)\n    const dispatch = useDispatch()\n\n    const amount = useRef();\n\n    return (\n        <>\n            <h2>State Management Using Redux:</h2>\n            <Button className=\"btn-padding\" variant=\"success\" onClick={() => dispatch(increment())}>+</Button>\n\n            <span>{count}</span>\n\n            <Button className=\"btn-padding\" variant=\"danger\" onClick={() => dispatch(decrement())}>-</Button>\n\n            <Form.Control type=\"number\" ref={amount} placeholder=\"Enter amount\" />\n\n            <Button className=\"btn-margin-top\" variant=\"primary\" onClick={() => dispatch(incrementByAmount(amount.current.value))}>Add Amount</Button>\n        </>\n    );\n};\n\nexport default Counter;","\nimport React, { useContext, useRef } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport CounterContext from \"./counter-context\";\n\nconst Counter = () => {\n\n    const userCtx = useContext(CounterContext);\n\n    const amount = useRef();\n\n    return (\n        <>\n            <h2>State Management with Context</h2>\n            <Button className=\"btn-padding\" variant=\"success\" onClick={() => userCtx.increment()}>+</Button>\n\n            <span>{userCtx.counter}</span>\n\n            <Button className=\"btn-padding\" variant=\"danger\" onClick={() => userCtx.decrement()}>-</Button>\n\n            <Form.Control type=\"number\" ref={amount} placeholder=\"Enter amount\" />\n            <Button className=\"btn-margin-top\" variant=\"primary\" onClick={() => userCtx.incrementByAmount(amount.current.value)}>Add Amount</Button>\n        </>\n    );\n};\n\nexport default Counter;","import React from 'react';\n\nconst Recursion = () => {\n    const myObject = {\n        \"a\": 1,\n        \"b\": [2, 3],\n        \"age\": 10,\n        ol: {\n            a: 5,\n            age: 20\n        },\n        \"d\": { \"age\": 30 }\n    };\n\n    let total = 0;\n    const calculateAge = (myObj, sum) => {\n\n        for (let obj in myObj) {\n            if (obj === 'age') {\n                total += myObj['age'];\n            }\n\n            if (typeof myObj[obj] == 'object' && myObj[obj] != null) {\n                calculateAge(myObj[obj], sum);\n            }\n        }\n    }\n\n    calculateAge(myObject, 0);\n\n    return (\n        <>\n            <h2>Recurssive Function: Nested Age Total = {total}</h2>\n            <pre>{JSON.stringify(myObject, null, 2)}</pre>\n        </>\n    );\n}\n\nexport default Recursion;","import React, { useEffect, useState } from \"react\";\n\nconst Timer = () => {\n\n    const [timer, setTimer] = useState();\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            const date = new Date();\n            const strDate = `${date.getDate()}/${date.getMonth()}/${date.getFullYear()} \n            ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\n            setTimer(strDate);\n        }, 1000);\n\n        setTimeout(() => {\n            clearInterval(interval);\n        }, 1000000);\n\n        return () => {\n            clearInterval(interval);\n        }\n    }, []);\n\n    return (\n        <h2>Timer: {timer}</h2>\n    );\n}\n\nexport default Timer;","import React, { useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\n\nconst Toggle = () => {\n    const [change, setChange] = useState(false);\n    const handleChange = () => {\n        setChange(!change);\n    }\n    return (\n        <>\n            <p>Toggle Text:</p>\n            {!change && <p>Hello World.</p>}\n            {change && <p>Welcome.</p>}\n            <Button onClick={handleChange}>Changed!</Button>\n        </>\n    )\n}\n\nexport default Toggle;\n","import React, { useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\n\nconst Timeout = () => {\n    const [textClass, setTextClass] = useState('black');\n    const [buttonClass, setButtonClass] = useState('show')\n\n    const hideButton = () => setTimeout(() => {\n        setButtonClass('hide');\n    }, 1000);\n\n    const showButton = () => setTimeout(() => {\n        setButtonClass('show');\n        setTextClass('black');\n    }, 3000);\n\n    const handleClick = () => {\n        setTextClass('red');\n        hideButton();\n        showButton();\n    }\n\n    return (\n        <>\n            <p className={textClass}>\n                When you click on button, < br />\n                text turns red, < br />\n                after 1 sec, button disappears, < br />\n                after 3 seconds button reappaears and text turns black again\n            </p>\n\n            <Button className={buttonClass} onClick={handleClick}>Click!</Button>\n        </>\n    )\n}\n\nexport default Timeout;\n","import React, { useEffect, useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\n\nconst FormData = () => {\n    const [todo, setTodo] = useState('');\n    const [todos, setTodos] = useState([]);\n\n    useEffect(() => {\n\n        const fetchData = async () => {\n            const response = await fetch( 'http://localhost:8000/api/todos' );\n            const responseData = await response.json();            \n            setTodos(responseData.todos);\n        }\n\n        fetchData();\n    }, []);\n\n    const todoChangeHandler = event => {\n        setTodo(event.target.value);\n    }\n\n    const handleSave = async event => {\n        event.preventDefault();\n\n        if( todo.trim().length === 0 ) {\n            return false;\n        }\n\n        try {\n            const response = await fetch(\n                'http://localhost:8000/api/todo',\n                {\n                    method: 'POST',\n                    body: JSON.stringify(\n                        {\n                            name: todo,\n                        }\n                    ),\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }                    \n                }\n            );\n\n            const responseData = await response.json();\n            \n            console.log(responseData);\n\n            if (!response.ok) {\n                throw new Error(responseData.message);\n            }\n        } catch (err) {\n            console.log(err);\n        }\n\n        setTodo('');\n    }\n\n    return (\n        <>\n            <p>Todo: </p>\n            <input type='text' id='name' name='name' onChange={todoChangeHandler} value={todo}/>\n            &nbsp;&nbsp;\n            <Button onClick={handleSave}>Save</Button>\n            <p>List Todo</p>\n            <ul>\n                {todos.map( todo => {\n                    return <li key={todo.key}>{todo.name}</li>\n                })}\n            </ul>\n        </>\n    );\n}\n\nexport default FormData;\n","import React from 'react';\nimport { atom } from \"recoil\";\n\nexport const counterState = atom({\n    key: 'counterState',\n    default: 0\n});","import React from 'react';\nimport { atom } from \"recoil\";\n\nexport const incrementByState = atom({\n    key: 'incrementByState',\n    default: 1\n});","import React from 'react';\nimport { Form, Button } from \"react-bootstrap\"\nimport { useRecoilState } from \"recoil\";\nimport { counterState } from \"./counterState\";\nimport { incrementByState } from \"./incrementByState\";\n\nexport const CounterButton = () => {\n    const [numberOfClicks, setNumberOfClicks] = useRecoilState(counterState);\n    const [incrementBy, setIncrementBy] = useRecoilState(incrementByState);\n\n    return (\n        <>\n            <h2>State Management with Recoil</h2>\n            <p>You have clicked button {numberOfClicks} times.</p>\n            <Form.Control value={incrementBy} onChange={e => setIncrementBy(Number(e.target.value))} type=\"number\" placeholder=\"Enter number\" />\n            < br />\n            <Button onClick={() => setNumberOfClicks(numberOfClicks + incrementBy)}>Set By Number</Button>\n        </>\n    )\n}","import React, { useState } from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\nimport { observer } from 'mobx-react-lite';\n\nexport const CounterMobx = observer(({ counter }) => {\n    const [incrementBy, setIncrementBy] = useState(1);\n\n    return (\n        <>\n            <h2>State Management with Mobx</h2>\n            <p>You have clicked button {counter.numberOfClicks} times.</p>\n            <Form.Control value={incrementBy} onChange={e => setIncrementBy(Number(e.target.value))} type=\"number\" placeholder=\"Enter number\" />\n            < br />\n            <Button onClick={() => counter.increment(incrementBy)}>Set By Number</Button>\n        </>\n    )\n});","import React from 'react';\nimport { makeObservable, observable, action } from 'mobx';\n\nexport class Counter {\n    numberOfClicks = 0;\n\n    constructor() {\n        makeObservable(this, {\n            numberOfClicks: observable,\n            increment: action\n        });\n    }\n\n    increment = amount => {\n        this.numberOfClicks += amount;\n    }\n}","import React from 'react';\nimport Redux from \"../../features/components/store/Counter\";\nimport Context from \"../../features/components/context/Counter\";\nimport Recursion from \"../../features/pages/Recursion\";\nimport Timer from \"../../features/pages/Timer\";\nimport Modal from \"../components/Modal\";\nimport Toggle from \"../../features/pages/Toggle\";\nimport Timeout from \"../../features/pages/Timeout\";\nimport FormData from '../../features/pages/FormData';\nimport { CounterButton } from \"../../features/components/recoil/CounterButton\";\nimport { CounterMobx } from \"../../features/components/mobx/CounterMobx\";\nimport { Counter } from \"../../features/components/mobx/Counter\";\n\nconst counter = new Counter();\n\nconst Features = () => {\n    return (\n        <Modal>\n            <Timer />\n            <hr />\n            <Redux />\n            <hr />\n            <Context />\n            <hr />\n            <CounterButton />\n            <hr />\n            <CounterMobx counter={counter} />\n            <hr />\n            <Recursion />\n            <hr />\n            <Toggle />\n            <hr />\n            <Timeout />\n            <hr />\n            <FormData />\n        </Modal>\n    )\n}\n\nexport default Features;"],"names":["props","className","children","count","useSelector","state","counter","value","dispatch","useDispatch","amount","useRef","Button","variant","onClick","increment","decrement","Form","type","ref","placeholder","incrementByAmount","current","userCtx","useContext","CounterContext","myObject","ol","a","age","total","calculateAge","myObj","sum","obj","JSON","stringify","useState","timer","setTimer","useEffect","interval","setInterval","date","Date","strDate","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","setTimeout","clearInterval","change","setChange","textClass","setTextClass","buttonClass","setButtonClass","todo","setTodo","todos","setTodos","fetchData","fetch","response","json","responseData","handleSave","event","preventDefault","trim","length","method","body","name","headers","console","log","ok","Error","message","id","onChange","target","map","key","counterState","atom","default","incrementByState","CounterButton","useRecoilState","numberOfClicks","setNumberOfClicks","incrementBy","setIncrementBy","e","Number","CounterMobx","observer","Counter","makeObservable","this","observable","action","Modal"],"sourceRoot":""}